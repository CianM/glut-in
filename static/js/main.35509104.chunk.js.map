{"version":3,"sources":["components/capture-button.jsx","components/container.jsx","components/camera.jsx","services/recognition.service.js","components/result.jsx","containers/camera-container.jsx","App.js","serviceWorker.js","index.js"],"names":["CaptureButton","styled","button","_templateObject","Container","div","container_templateObject","Video","video","camera_templateObject","Canvas","canvas","_templateObject2","Camera","canvasRef","React","createRef","videoRef","setupCamera","navigator","mediaDevices","getUserMedia","then","stream","_this","current","srcObject","play","catch","error","console","takedownCamera","_this$stream$getTrack","getTracks","Object","slicedToArray","stop","takePhoto","onImageCapture","props","_this$videoRef$curren","height","videoHeight","width","videoWidth","context","getContext","drawImage","toDataURL","this","react_default","a","createElement","container","capture_button","onClick","ref","Component","recognitionService","RecognitionService","classCallCheck","_configureLibrary","config","_getConfig","_tesseract","Tesseract","create","workerPath","concat","window","location","href","langPath","corePath","image","_job","recognize","ResultContainer","result_templateObject","_ref","background","propTypes","PropTypes","string","isRequired","Result","startDetection","CameraContainer","state","imageData","setImageData","setState","log","camera","result","App","camera_container","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"ymBAEA,IAceA,EAdOC,IAAOC,OAAVC,+GCAnB,IAKeC,EALGH,IAAOI,IAAVC,6QCKf,IAAMC,EAAQN,IAAOO,MAAVC,KAMLC,EAAST,IAAOU,OAAVC,KAyEGC,6MA/DXC,UAAYC,IAAMC,cAClBC,SAAWF,IAAMC,cAUjBE,YAAc,WAQVC,UAAUC,aAAaC,aAPH,CAAEb,OAAO,IAQxBc,KAPc,SAAAC,GAAM,OAAIC,EAAKD,OAASA,IAQtCD,KAPkB,WACnBE,EAAKP,SAASQ,QAAQC,UAAYF,EAAKD,OACvCC,EAAKP,SAASQ,QAAQE,SAMrBC,MAAM,SAAAC,GAAK,OAAIC,QAAQD,MAAMA,QAGtCE,eAAiB,WACb,GAAGP,EAAKD,OAAQ,KAAAS,EACIR,EAAKD,OAAOU,YADhBC,OAAAC,EAAA,EAAAD,CAAAF,EAAA,MAENI,WAIdC,UAAY,WAAM,IACNC,EAAmBd,EAAKe,MAAxBD,eADME,EAEqChB,EAAKP,SAASQ,QAA5CgB,EAFPD,EAENE,YAAiCC,EAF3BH,EAEeI,WAEvBC,EAAUrB,EAAKV,UAAUW,QAAQqB,WAAW,MAElDtB,EAAKV,UAAUW,QAAQkB,MAAQA,EAC/BnB,EAAKV,UAAUW,QAAQgB,OAASA,EAEhCI,EAAQE,UAAUvB,EAAKP,SAASQ,QAAS,EAAG,EAAGkB,EAAOF,GAItDH,EAFqBd,EAAKV,UAAUW,QAAQuB,UAAU,kGAvCtDC,KAAK/B,6DAIL+B,KAAKlB,kDAyCN,OACImB,EAAAC,EAAAC,cAACC,EAAD,KACIH,EAAAC,EAAAC,cAACE,EAAD,CAAeC,QAASN,KAAKZ,WAA7B,cACAa,EAAAC,EAAAC,cAAC7C,EAAD,CAAOiD,IAAKP,KAAKhC,WACjBiC,EAAAC,EAAAC,cAAC1C,EAAD,CAAQ8C,IAAKP,KAAKnC,oBAzDZ2C,+CCSRC,EAAqB,eArBjC,SAAAC,IAAc,IAAAnC,EAAAyB,KAAAf,OAAA0B,EAAA,EAAA1B,CAAAe,KAAAU,GAAAV,KAQdY,kBAAoB,WACnB,IAAMC,EAAStC,EAAKuC,aACpBvC,EAAKwC,WAAaC,IAAUC,OAAOJ,IAVtBb,KAadc,WAAa,iBAAO,CACnBI,WAAU,GAAAC,OAAKC,OAAOC,SAASC,KAArB,uBACVC,SAAQ,GAAAJ,OAAKC,OAAOC,SAASC,KAArB,mBACRE,SAAQ,GAAAL,OAAKC,OAAOC,SAASC,KAArB,uBAfRtB,KAAKY,+EAGSa,GACdzB,KAAK0B,KAAO1B,KAAKe,WAAWY,UAAUF,sLCJxC,IAAMG,EAAkB5E,YAAOG,EAAPH,CAAH6E,IACG,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,WAAH,aAAAZ,OAA2BY,EAA3B,OAKxBH,EAAgBI,UAAY,CACxBD,WAAYE,IAAUC,OAAOC,gBA4BlBC,8LArBPpC,KAAKqC,0DAGQ,IACLZ,EAAUzB,KAAKV,MAAfmC,MACRhB,EAAmB4B,eAAeZ,oCAG7B,IACGA,EAAUzB,KAAKV,MAAfmC,MAER,OACIxB,EAAAC,EAAAC,cAACyB,EAAD,CAAiBG,WAAYN,WAfpBjB,aCON8B,6MAlBXC,MAAQ,CACJC,UAAW,QAGfC,aAAe,SAAAD,GAAS,OAAIjE,EAAKmE,SAAS,CAAEF,uFAEnC,IACGA,EAAcxC,KAAKuC,MAAnBC,UAER,OADA3D,QAAQ8D,IAAI,CAACH,cAETvC,EAAAC,EAAAC,cAACC,EAAD,MACOoC,GAAcvC,EAAAC,EAAAC,cAACyC,EAAD,CAAQvD,eAAgBW,KAAKyC,eAC5CD,GAAcvC,EAAAC,EAAAC,cAAC0C,EAAD,CAAQpB,MAAOe,YAdjBhC,aCOfsC,mLANX,OACE7C,EAAAC,EAAAC,cAAC4C,EAAD,aAHYvC,aCOEwC,QACW,cAA7B5B,OAAOC,SAAS4B,UAEe,UAA7B7B,OAAOC,SAAS4B,UAEhB7B,OAAOC,SAAS4B,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBrF,WACrBA,UAAUsF,cAAcC,MAAMpF,KAAK,SAAAqF,GACjCA,EAAaC","file":"static/js/main.35509104.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nconst CaptureButton = styled.button`\n\tposition: fixed;\n\tleft: calc(50% - 2.5rem);\n\tbottom: 2rem;\n\tbackground-color: rgba(254, 254, 254, 0.6);\n\theight: 5rem;\n\twidth: 5rem;\n\tborder: 0.25rem solid lightgray;\n\tborder-radius: 50%;\n\ttext-align: center;\n\tcursor: pointer;\n\tz-index: 1;\n`;\n\nexport default CaptureButton;\n","import styled from \"styled-components\";\n\nconst Container = styled.div`\n\theight: 100vh;\n\twidth: 100vw;\n`;\n\nexport default Container;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nimport CaptureButton from \"./capture-button\";\nimport Container from \"./container\";\n\nconst Video = styled.video`\n    height: 100vh;\n    width: 100vw;\n    object-fit: cover;\n`;\n\nconst Canvas = styled.canvas`\n    display: none;\n    height: 100vh;\n    width: 100vw;\n`;\n\nclass Camera extends Component {\n\n    stream;\n\n    canvasRef = React.createRef();\n    videoRef = React.createRef();\n\n    componentDidMount() {\n        this.setupCamera();\n    }\n\n    componentWillUnmount() {\n        this.takedownCamera();\n    }\n\n    setupCamera = () => {\n        const constraints = { video: true };\n        const saveStream = stream => this.stream = stream;\n        const setVideoSource = () => {\n            this.videoRef.current.srcObject = this.stream;\n            this.videoRef.current.play();\n        };\n\n        navigator.mediaDevices.getUserMedia(constraints)\n            .then(saveStream)\n            .then(setVideoSource)\n            .catch(error => console.error(error));\n    }\n\n    takedownCamera = () => {\n        if(this.stream) {\n            const [track] = this.stream.getTracks(); \n            track.stop();\n        }\n    }\n\n    takePhoto = () => {\n        const { onImageCapture } = this.props;\n        const { videoHeight: height, videoWidth: width } = this.videoRef.current;\n        \n        const context = this.canvasRef.current.getContext(\"2d\");\n\n        this.canvasRef.current.width = width;\n        this.canvasRef.current.height = height;\n\n        context.drawImage(this.videoRef.current, 0, 0, width, height);\n\n        const imageDataURL = this.canvasRef.current.toDataURL(\"image/png\");\n\n        onImageCapture(imageDataURL);\n    }\n\n    render() {\n       return (\n           <Container>\n               <CaptureButton onClick={this.takePhoto}>Take Photo</CaptureButton>\n               <Video ref={this.videoRef}></Video>\n               <Canvas ref={this.canvasRef}></Canvas>\n           </Container>  \n       );\n   }\n}\n\nCamera.propTypes = {\n    onImageCapture: PropTypes.func.isRequired\n};\n\nexport default Camera;\n","import Tesseract from 'tesseract.js'\n\nclass RecognitionService {\n\n\t_job;\n\t_tesseract;\n\n\tconstructor() {\n\t\tthis._configureLibrary();\n\t}\n\n\tstartDetection(image) {\n\t\tthis._job = this._tesseract.recognize(image);\n\t}\n\n\t_configureLibrary = () => {\n\t\tconst config = this._getConfig();\n\t\tthis._tesseract = Tesseract.create(config);\n\t}\n\n\t_getConfig = () => ({\n\t\tworkerPath: `${window.location.href}tesseract/worker.js`,\n\t\tlangPath: `${window.location.href}tesseract/lang/`,\n\t\tcorePath: `${window.location.href}tesseract/core.js`,\n\t});\n\n}\n\nexport const recognitionService = new RecognitionService();\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nimport Container from \"./container\";\n\nimport { recognitionService } from \"../services/recognition.service\";\n\nconst ResultContainer = styled(Container)`\n    background-image: ${({ background }) => `url(${background})`};\n    background-position: center center;\n    background-size: cover;\n`;\n\nResultContainer.propTypes = {\n    background: PropTypes.string.isRequired\n};\n\n\nclass Result extends Component {\n\n    componentDidMount() {\n        this.startDetection();\n    }\n\n    startDetection() {\n        const { image } = this.props;\n        recognitionService.startDetection(image);\n    }\n\n    render() {\n        const { image } = this.props;\n\n        return (\n            <ResultContainer background={image}></ResultContainer>\n        );\n    }\n}\n\nResult.propTypes = {\n    image: PropTypes.string.isRequired\n};\n\nexport default Result;","import React, { Component } from \"react\";\n\nimport Camera from \"../components/camera\";\nimport Container from \"../components/container\";\nimport Result from \"../components/result\";\n\nclass CameraContainer extends Component {\n\n    state = {\n        imageData: null\n    };\n\n    setImageData = imageData => this.setState({ imageData });\n\n    render() {\n        const { imageData } = this.state;\n        console.log({imageData})\n        return (\n            <Container>\n                { !imageData && (<Camera onImageCapture={this.setImageData} />) }\n                { imageData && (<Result image={imageData} />) }\n            </Container>\n        );\n    }\n}\n\nexport default CameraContainer;","import React, { Component } from 'react';\nimport './App.css';\n\nimport CameraContainer from './containers/camera-container';\n\nclass App extends Component {\n  render() {\n    return (\n      <CameraContainer />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}