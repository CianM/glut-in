{"version":3,"sources":["images/close.svg","images/hamburger.svg","images/test-data/label-gluten-1.png","images/test-data/label-gluten-2.png","images/test-data/label-gluten-free-1.jpg","images/test-data/label-gluten-free-2.jpg","components/capture-button.jsx","components/container.jsx","utils/constants.js","components/camera.jsx","components/menu.jsx","containers/camera-container.jsx","services/recognition.service.js","containers/results-container.jsx","images/test-data/index.js","containers/test-data-container.jsx","routers/redirect.route.jsx","routers/results.route.jsx","routers/index.js","app.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","CaptureButton","styled","button","_templateObject","Container","div","container_templateObject","ROUTES","Object","freeze","HOME","RESULTS","TEST","Video","video","camera_templateObject","Canvas","canvas","_templateObject2","Camera","canvasRef","React","createRef","videoRef","setupCamera","navigator","mediaDevices","getUserMedia","facingMode","ideal","then","stream","_this","current","srcObject","play","catch","error","console","takedownCamera","_this$stream$getTrack","getTracks","slicedToArray","stop","takePhoto","push","props","history","_this$videoRef$curren","height","videoHeight","width","videoWidth","context","getContext","drawImage","data","image","toDataURL","this","react_default","a","createElement","container","capture_button","onClick","ref","Component","withRouter","MenuContainer","menu_templateObject","_ref","visible","propTypes","PropTypes","bool","defaultProps","Header","menu_templateObject2","CloseButton","img","_templateObject3","Item","Link","_templateObject4","Menu","handleClickOutside","event","closeFn","_this$props","open","src","CloseIcon","alt","to","onClickOutside","HamburgerButton","camera_container_templateObject","CameraContainer","state","menuOpen","openMenu","setState","closeMenu","camera","HamburgerIcon","menu","recognitionService","RecognitionService","classCallCheck","_configureLibrary","config","_getConfig","_tesseract","Tesseract","create","workerPath","concat","window","location","origin","langPath","corePath","_job","recognize","ResultBackground","results_container_templateObject","background","string","isRequired","ResultsContainer","startDetection","glutenImageData","Gluten1","Gluten2","glutenFreeImageData","GlutenFree1","GlutenFree2","test_data_container_templateObject","Title","h1","test_data_container_templateObject2","ItemContainer","test_data_container_templateObject3","test_data_container_templateObject4","TestData","sendDataForTest","_this2","test_data_container_Container","map","index","test_data_container_Item","key","RedirectRoute","Redirect","from","ResultsRoute","_ref2","component","rest","objectWithoutProperties","Route","assign","render","_ref$location","_ref$location$state","Boolean","hasImageData","redirect_route","Router","Switch","exact","path","results_route","App","log","process","BrowserRouter","basename","Fragment","routers","hostname","match","root","document","getElementById","ReactDOM","app","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,0DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,+DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,+DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,2nBCExC,IAceC,EAdOC,IAAOC,OAAVC,+GCAnB,IAKeC,EALGH,IAAOI,IAAVC,KCFFC,EAASC,OAAOC,OAAO,CAChCC,KAAM,IACNC,QAAS,WACTC,KAAM,uRCOV,IAAMC,EAAQZ,IAAOa,MAAVC,KAMLC,EAASf,IAAOgB,OAAVC,KAMNC,6MAIFC,UAAYC,IAAMC,cAClBC,SAAWF,IAAMC,cAUjBE,YAAc,WAQVC,UAAUC,aAAaC,aAPH,CAAEb,MAAO,CAAEc,WAAY,CAAEC,MAAO,kBAQ/CC,KAPc,SAAAC,GAAM,OAAIC,EAAKD,OAASA,IAQtCD,KAPkB,WACnBE,EAAKT,SAASU,QAAQC,UAAYF,EAAKD,OACvCC,EAAKT,SAASU,QAAQE,SAMrBC,MAAM,SAAAC,GAAK,OAAIC,QAAQD,MAAMA,QAGtCE,eAAiB,WACb,GAAGP,EAAKD,OAAQ,KAAAS,EACIR,EAAKD,OAAOU,YADhBjC,OAAAkC,EAAA,EAAAlC,CAAAgC,EAAA,MAENG,WAIdC,UAAY,WAAM,IACKC,EAAWb,EAAKc,MAA3BC,QAAWF,KADLG,EAGqChB,EAAKT,SAASU,QAA5CgB,EAHPD,EAGNE,YAAiCC,EAH3BH,EAGeI,WAEvBC,EAAUrB,EAAKZ,UAAUa,QAAQqB,WAAW,MAElDtB,EAAKZ,UAAUa,QAAQkB,MAAQA,EAC/BnB,EAAKZ,UAAUa,QAAQgB,OAASA,EAEhCI,EAAQE,UAAUvB,EAAKT,SAASU,QAAS,EAAG,EAAGkB,EAAOF,GAEtD,IAEMO,EAAO,CAAEC,MAFMzB,EAAKZ,UAAUa,QAAQyB,UAAU,cAGtDb,EAAKtC,EAAOI,QAAS6C,uFA3CrBG,KAAKnC,6DAILmC,KAAKpB,kDA2CN,OACIqB,EAAAC,EAAAC,cAACC,EAAD,KACIH,EAAAC,EAAAC,cAACE,EAAD,CAAeC,QAASN,KAAKf,WAA7B,cACAgB,EAAAC,EAAAC,cAACjD,EAAD,CAAOqD,IAAKP,KAAKpC,WACjBqC,EAAAC,EAAAC,cAAC9C,EAAD,CAAQkD,IAAKP,KAAKvC,oBA3DZ+C,aAuENC,cAAWjD,oxBCnF1B,IAAMkD,EAAgBpE,IAAOI,IAAViE,IACJ,SAAAC,GAAA,OAAAA,EAAGC,QAAwB,OAAS,SAanDH,EAAcI,UAAY,CACtBD,QAASE,IAAUC,MAGvBN,EAAcO,aAAe,CACzBJ,SAAS,GAGb,IAAMK,EAAS5E,IAAOI,IAAVyE,KAMZD,EAAOE,YAAc9E,IAAO+E,IAA5BC,KAKA,IAAMC,EAAOjF,YAAOkF,IAAPlF,CAAHmF,KAOJC,6MAEFC,mBAAqB,SAAAC,GAAK,OAAIvD,EAAKc,MAAM0C,mFAEhC,IAAAC,EACqB9B,KAAKb,MAAvB0C,EADHC,EACGD,QAASE,EADZD,EACYC,KAEjB,OACI9B,EAAAC,EAAAC,cAACO,EAAD,CAAeG,QAASkB,GACpB9B,EAAAC,EAAAC,cAACe,EAAD,KACIjB,EAAAC,EAAAC,cAACe,EAAOE,YAAR,CAAoBY,IAAKC,IAAWC,IAAI,QAAQ5B,QAASuB,KAE7D5B,EAAAC,EAAAC,cAACoB,EAAD,CAAMY,GAAIvF,EAAOK,MAAjB,qBAZGuD,aAuBnBkB,EAAKT,aAAe,CAChBY,QAAS,aACTE,MAAM,GAGKK,kBAAeV,mPCrE9B,IAAMW,EAAkB/F,IAAO+E,IAAViB,KAmCNC,6MAxBXC,MAAQ,CACJC,UAAU,KAGdC,SAAW,kBAAMrE,EAAKsE,SAAS,CAAEF,UAAU,OAC3CG,UAAY,kBAAMvE,EAAKsE,SAAS,CAAEF,UAAU,6EAEnC,IACGA,EAAazC,KAAKwC,MAAlBC,SAER,OACIxC,EAAAC,EAAAC,cAACC,EAAD,KACIH,EAAAC,EAAAC,cAAC0C,EAAD,OAEKJ,GACGxC,EAAAC,EAAAC,cAACkC,EAAD,CAAiBL,IAAKc,IAAeZ,IAAI,OAAO5B,QAASN,KAAK0C,WAGtEzC,EAAAC,EAAAC,cAAC4C,EAAD,CAAMhB,KAAMU,EAAUZ,QAAS7B,KAAK4C,oBApBtBpC,8BCUjBwC,EAAqB,eArBjC,SAAAC,IAAc,IAAA5E,EAAA2B,KAAAnD,OAAAqG,EAAA,EAAArG,CAAAmD,KAAAiD,GAAAjD,KAQdmD,kBAAoB,WACnB,IAAMC,EAAS/E,EAAKgF,aACpBhF,EAAKiF,WAAaC,IAAUC,OAAOJ,IAVtBpD,KAadqD,WAAa,iBAAO,CACnBI,WAAU,GAAAC,OAAKC,OAAOC,SAASC,OAArB,wBACVC,SAAQ,GAAAJ,OAAKC,OAAOC,SAASC,OAArB,oBACRE,SAAQ,GAAAL,OAAKC,OAAOC,SAASC,OAArB,wBAfR7D,KAAKmD,+EAGSrD,GACdE,KAAKgE,KAAOhE,KAAKsD,WAAWW,UAAUnE,gNCHxC,IAAMoE,GAAmB5H,YAAOG,EAAPH,CAAH6H,IACE,SAAAvD,GAAA,IAAGwD,EAAHxD,EAAGwD,WAAH,aAAAV,OAA2BU,EAA3B,OAMxBF,GAAiBpD,UAAY,CACzBsD,WAAYrD,IAAUsD,OAAOC,gBAI3BC,+LAGEvE,KAAKwE,0DAGQ,IACU1E,EAAcE,KAAKb,MAAxCyE,SAAYpB,MAAS1C,MAC7BkD,EAAmBwB,eAAe1E,oCAGvB,IACwBA,EAAcE,KAAKb,MAAxCyE,SAAYpB,MAAS1C,MAE7B,OACIG,EAAAC,EAAAC,cAAC+D,GAAD,CAAkBE,WAAYtE,WAfXU,aA4BhBC,eAAW8D,oFC3CpBE,GAAkB,CACvBC,KACAC,MAGKC,GAAsB,CAC3BC,KACAC,0jBCJD,IAAMrI,GAAYH,IAAOI,IAAVqI,MAITC,GAAQ1I,IAAO2I,GAAVC,MAELC,GAAgB7I,IAAOI,IAAV0I,MASb7D,GAAOjF,IAAO+E,IAAVgE,MAOJC,8MAGFC,gBAAkB,SAAAzF,GAAS,IAEjBD,EAAO,CAAEC,UAEfZ,EAH8Bb,EAAKc,MAA3BC,QAAWF,MAGdtC,EAAOI,QAAS6C,4EAGhB,IAAA2F,EAAAxF,KACL,OACIC,EAAAC,EAAAC,cAACsF,GAAD,KACIxF,EAAAC,EAAAC,cAAC6E,GAAD,eACA/E,EAAAC,EAAAC,cAACgF,GAAD,KAEQV,GAAgBiB,IACZ,SAAC5F,EAAO6F,GAAR,OACI1F,EAAAC,EAAAC,cAACyF,GAAD,CAAMC,IAAKF,EAAO3D,IAAKlC,EAAOQ,QAAS,kBAAMkF,EAAKD,gBAAgBzF,SAKlFG,EAAAC,EAAAC,cAAC6E,GAAD,oBACA/E,EAAAC,EAAAC,cAACgF,GAAD,KAEQP,GAAoBc,IAChB,SAAC5F,EAAO6F,GAAR,OACI1F,EAAAC,EAAAC,cAACyF,GAAD,CAAMC,IAAKF,EAAO3D,IAAKlC,EAAOQ,QAAS,kBAAMkF,EAAKD,gBAAgBzF,iBA5B3EU,aA4CRC,eAAW6E,aCpEXQ,GAFO,kBAAO7F,EAAAC,EAAAC,cAAC4F,GAAA,EAAD,CAAUC,KAAK,IAAI7D,GAAIvF,EAAOG,iBCS5CkJ,GANM,SAAAC,GAAA,IAAc1F,EAAd0F,EAAGC,UAAyBC,EAA5BvJ,OAAAwJ,GAAA,EAAAxJ,CAAAqJ,EAAA,sBACpBjG,EAAAC,EAAAC,cAACmG,EAAA,EAADzJ,OAAA0J,OAAA,GAAWH,EAAX,CAAiBI,OAChB,SAAArH,GAAK,OAJc,SAAAyB,GAAA,IAAA6F,EAAA7F,EAAGgD,SAAH8C,GAAAD,OAAA,IAAAA,EAAyC,GAAzCA,GAAejE,MAAS1C,GAAxB4G,OAAA,IAAAA,EAAkC,GAAlCA,GAAwB5G,MAAxB,OAAkD6G,QAAQ7G,GAIpE8G,CAAazH,GAAUc,EAAAC,EAAAC,cAACK,EAAcrB,GAAcc,EAAAC,EAAAC,cAAC0G,GAAD,WCEzDC,oLAEJ,OACC7G,EAAAC,EAAAC,cAAC4G,EAAA,EAAD,KACC9G,EAAAC,EAAAC,cAACmG,EAAA,EAAD,CAAOU,OAAK,EAACC,KAAMrK,EAAOG,KAAMoJ,UAAW5D,IAC3CtC,EAAAC,EAAAC,cAAC+G,GAAD,CAAcD,KAAMrK,EAAOI,QAASmJ,UAAW5B,KAE/CtE,EAAAC,EAAAC,cAACmG,EAAA,EAAD,CAAOW,KAAMrK,EAAOK,KAAMkJ,UAAWb,KAErCrF,EAAAC,EAAAC,cAAC0G,GAAD,cATiBrG,aAeNC,eAAWqG,ICRXK,oLAXX,OADAxI,QAAQyI,IAAI,CAAChL,EAAGiL,wDAEdpH,EAAAC,EAAAC,cAACmH,EAAA,EAAD,CAAeC,SAAUF,YACvBpH,EAAAC,EAAAC,cAAAF,EAAAC,EAAAsH,SAAA,KACEvH,EAAAC,EAAAC,cAAA,SAAIkH,YACJpH,EAAAC,EAAAC,cAACsH,GAAD,eAPQjH,mBCOEmG,QACW,cAA7BhD,OAAOC,SAAS8D,UAEe,UAA7B/D,OAAOC,SAAS8D,UAEhB/D,OAAOC,SAAS8D,SAASC,MACvB,2DCTN,IAAMC,GAAOC,SAASC,eAAe,QACrCC,IAASvB,OAAQvG,EAAAC,EAAAC,cAAC6H,GAAD,MAAUJ,IDuHrB,kBAAmB9J,WACrBA,UAAUmK,cAAcC,MAAM/J,KAAK,SAAAgK,GACjCA,EAAaC","file":"static/js/main.e25c19bb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/close.506c8461.svg\";","module.exports = __webpack_public_path__ + \"static/media/hamburger.efabf306.svg\";","module.exports = __webpack_public_path__ + \"static/media/label-gluten-1.66f26d62.png\";","module.exports = __webpack_public_path__ + \"static/media/label-gluten-2.b3b2f176.png\";","module.exports = __webpack_public_path__ + \"static/media/label-gluten-free-1.0a8c7d62.jpg\";","module.exports = __webpack_public_path__ + \"static/media/label-gluten-free-2.863a2528.jpg\";","import styled from \"styled-components\";\n\nconst CaptureButton = styled.button`\n\tposition: fixed;\n\tleft: calc(50% - 2.5rem);\n\tbottom: 2rem;\n\tbackground-color: rgba(254, 254, 254, 0.6);\n\theight: 5rem;\n\twidth: 5rem;\n\tborder: 0.25rem solid lightgray;\n\tborder-radius: 50%;\n\ttext-align: center;\n\tcursor: pointer;\n\tz-index: var(--z-index-capture-button);\n`;\n\nexport default CaptureButton;\n","import styled from \"styled-components\";\n\nconst Container = styled.div`\n\theight: 100vh;\n\twidth: 100vw;\n`;\n\nexport default Container;\n","export const ROUTES = Object.freeze({\n    HOME: \"/\",\n    RESULTS: \"/results\",\n    TEST: \"/test-data\"\n});\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport { withRouter } from \"react-router-dom\";\n\nimport CaptureButton from \"./capture-button\";\nimport Container from \"./container\";\n\nimport { ROUTES } from \"../utils/constants\";\n\nconst Video = styled.video`\n    height: 100vh;\n    width: 100vw;\n    object-fit: cover;\n`;\n\nconst Canvas = styled.canvas`\n    display: none;\n    height: 100vh;\n    width: 100vw;\n`;\n\nclass Camera extends Component {\n\n    stream;\n\n    canvasRef = React.createRef();\n    videoRef = React.createRef();\n\n    componentDidMount() {\n        this.setupCamera();\n    }\n\n    componentWillUnmount() {\n        this.takedownCamera();\n    }\n\n    setupCamera = () => {\n        const constraints = { video: { facingMode: { ideal: \"environment\" } } };\n        const saveStream = stream => this.stream = stream;\n        const setVideoSource = () => {\n            this.videoRef.current.srcObject = this.stream;\n            this.videoRef.current.play();\n        };\n\n        navigator.mediaDevices.getUserMedia(constraints)\n            .then(saveStream)\n            .then(setVideoSource)\n            .catch(error => console.error(error));\n    }\n\n    takedownCamera = () => {\n        if(this.stream) {\n            const [track] = this.stream.getTracks(); \n            track.stop();\n        }\n    }\n\n    takePhoto = () => {\n        const { history: { push } } = this.props;\n\n        const { videoHeight: height, videoWidth: width } = this.videoRef.current;\n        \n        const context = this.canvasRef.current.getContext(\"2d\");\n\n        this.canvasRef.current.width = width;\n        this.canvasRef.current.height = height;\n\n        context.drawImage(this.videoRef.current, 0, 0, width, height);\n\n        const imageDataURL = this.canvasRef.current.toDataURL(\"image/png\");\n\n        const data = { image: imageDataURL };\n        push(ROUTES.RESULTS, data);\n    }\n\n    render() {\n       return (\n           <Container>\n               <CaptureButton onClick={this.takePhoto}>Take Photo</CaptureButton>\n               <Video ref={this.videoRef}></Video>\n               <Canvas ref={this.canvasRef}></Canvas>\n           </Container>  \n       );\n   }\n}\n\nCamera.propTypes = {\n    history: PropTypes.shape({\n        push: PropTypes.func\n    })\n};\n\nexport default withRouter(Camera);\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport onClickOutside from \"react-onclickoutside\";\nimport { Link } from \"react-router-dom\";\n\nimport CloseIcon from \"../images/close.svg\";\n\nimport { ROUTES } from \"../utils/constants\";\n\nconst MenuContainer = styled.div`\n    display: ${({ visible }) => visible ? \"flex\" : \"none\"};\n    flex-flow: column nowrap;\n    position: fixed;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    background-color: var(--color-white);\n    padding: 1rem;\n    height: 100%;\n    width: 60%;\n    z-index: var(--z-index-menu);\n`;\n\nMenuContainer.propTypes = {\n    visible: PropTypes.bool\n};\n\nMenuContainer.defaultProps = {\n    visible: false\n};\n\nconst Header = styled.div`\n    display: flex;\n    justify-content: flex-end;\n    align-items: center;\n`;\n\nHeader.CloseButton = styled.img`\n    height: 2rem;\n    width: 2rem;\n`;\n\nconst Item = styled(Link)`\n    display: flex;\n    align-items: center;\n    height: 3rem;\n    cursor: pointer;\n`;\n\nclass Menu extends Component {\n\n    handleClickOutside = event => this.props.closeFn();\n\n    render() {\n        const { closeFn, open } = this.props;\n\n        return (\n            <MenuContainer visible={open}>\n                <Header>\n                    <Header.CloseButton src={CloseIcon} alt=\"Close\" onClick={closeFn} />\n                </Header>\n                <Item to={ROUTES.TEST}>Test Data</Item>\n            </MenuContainer>\n        );\n    }\n}\n\nMenu.propTypes = {\n    closeFn: PropTypes.func,\n    open: PropTypes.bool\n};\n\nMenu.defaultProps = {\n    closeFn: () => {},\n    open: false\n};\n\nexport default onClickOutside(Menu);\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\n\nimport Camera from \"../components/camera\";\nimport Container from \"../components/container\";\nimport Menu from \"../components/menu\";\n\nimport HamburgerIcon from \"../images/hamburger.svg\";\n\nconst HamburgerButton = styled.img`\n    color: var(--color-white);\n    position: fixed;\n    top: 1rem;\n    right: 1rem;\n    z-index: var(--z-index-menu-button);\n    cursor: pointer;\n`;\n\nclass CameraContainer extends Component {\n\n    state = {\n        menuOpen: false\n    };\n\n    openMenu = () => this.setState({ menuOpen: true });\n    closeMenu = () => this.setState({ menuOpen: false });\n\n    render() {\n        const { menuOpen } = this.state;\n\n        return (\n            <Container>\n                <Camera />\n                { \n                    !menuOpen && (\n                        <HamburgerButton src={HamburgerIcon} alt=\"Menu\" onClick={this.openMenu} />\n                    ) \n                }\n                <Menu open={menuOpen} closeFn={this.closeMenu}/>\n            </Container>\n        );\n    }\n}\n\nexport default CameraContainer;","import Tesseract from 'tesseract.js'\n\nclass RecognitionService {\n\n\t_job;\n\t_tesseract;\n\n\tconstructor() {\n\t\tthis._configureLibrary();\n\t}\n\n\tstartDetection(image) {\n\t\tthis._job = this._tesseract.recognize(image);\n\t}\n\n\t_configureLibrary = () => {\n\t\tconst config = this._getConfig();\n\t\tthis._tesseract = Tesseract.create(config);\n\t}\n\n\t_getConfig = () => ({\n\t\tworkerPath: `${window.location.origin}/tesseract/worker.js`,\n\t\tlangPath: `${window.location.origin}/tesseract/lang/`,\n\t\tcorePath: `${window.location.origin}/tesseract/core.js`,\n\t});\n\n}\n\nexport const recognitionService = new RecognitionService();\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport { withRouter } from \"react-router-dom\";\n\nimport Container from \"../components/container\";\n\nimport { recognitionService } from \"../services/recognition.service\";\n\nconst ResultBackground = styled(Container)`\n    background-image: ${({ background }) => `url(${background})`};\n    background-position: center center;\n\tbackground-size: cover;\n\tfilter: grayscale(100%);\n`;\n\nResultBackground.propTypes = {\n    background: PropTypes.string.isRequired\n};\n\n\nclass ResultsContainer extends Component {\n\n    componentDidMount() {\n        this.startDetection();\n    }\n\n    startDetection() {\n\t\tconst { location: { state: { image } } } = this.props;\n\t\trecognitionService.startDetection(image);\n    }\n\n    render() {\n        const { location: { state: { image } } } = this.props;\n\n        return (\n            <ResultBackground background={image} />\n        );\n    }\n}\n\nResultsContainer.propTypes = {\n    location: PropTypes.shape({\n\t\tstate: PropTypes.shape({\n\t\t\timage: PropTypes.string\n\t\t})\n\t})\n};\n\nexport default withRouter(ResultsContainer);","import Gluten1 from \"./label-gluten-1.png\";\nimport Gluten2 from \"./label-gluten-2.png\";\n\nimport GlutenFree1 from \"./label-gluten-free-1.jpg\";\nimport GlutenFree2 from \"./label-gluten-free-2.jpg\";\n\nconst glutenImageData = [\n\tGluten1,\n\tGluten2\n];\n\nconst glutenFreeImageData = [\n\tGlutenFree1,\n\tGlutenFree2\n];\n\nexport {\n\tglutenImageData,\n\tglutenFreeImageData\n};\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport { withRouter } from \"react-router-dom\";\n\nimport { glutenImageData, glutenFreeImageData } from \"../images/test-data\";\n\nimport { ROUTES } from \"../utils/constants\";\n\nconst Container = styled.div`\n    padding: 1rem;\n`;\n\nconst Title = styled.h1``;\n\nconst ItemContainer = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-auto-rows: 1fr;\n    grid-column-gap: 1rem;\n    grid-row-gap: 1rem;\n    align-items: stretch;\n`;\n\nconst Item = styled.img`\n    width: 100%;\n    max-height: 5rem;\n    object-fit: cover;\n    cursor: pointer;\n`;\n\nclass TestData extends Component {\n\n    // TODO: Convert to Link component\n    sendDataForTest = image => {\n        const { history: { push } } = this.props;\n        const data = { image };\n\n        push(ROUTES.RESULTS, data);\n    }\n\n    render() {\n        return (\n            <Container>\n                <Title>Gluten</Title>\n                <ItemContainer>\n                    { \n                        glutenImageData.map(\n                            (image, index) => (\n                                <Item key={index} src={image} onClick={() => this.sendDataForTest(image)} />\n                            )\n                        ) \n                    }\n                </ItemContainer>\n                <Title>Gluten-Free</Title>\n                <ItemContainer>\n                    { \n                        glutenFreeImageData.map(\n                            (image, index) => (\n                                <Item key={index} src={image} onClick={() => this.sendDataForTest(image)} />\n                            )\n                        ) \n                    }\n                </ItemContainer>\n            </Container>\n        );\n    }\n}\n\nTestData.propTypes = {\n    history: PropTypes.shape({\n        push: PropTypes.func\n    })\n};\n\nexport default withRouter(TestData);","import React from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nimport { ROUTES } from \"../utils/constants\";\n\nconst RedirectRoute = () => (<Redirect from=\"*\" to={ROUTES.HOME} />)\n\nexport default RedirectRoute;\n","import React from \"react\";\nimport { Route } from \"react-router-dom\";\n\nimport RedirectRoute from \"./redirect.route\";\n\n// Only allow access to route if image data is present, else redirect\nconst hasImageData = ({ location: { state: { image } = {} } = {} }) => Boolean(image);\n\nconst ResultsRoute = ({ component: Component, ...rest }) => (\n\t<Route {...rest} render={\n\t\tprops => hasImageData(props) ? (<Component {...props} />) : (<RedirectRoute />)\n\t} />\n);\n\nexport default ResultsRoute;","import React, { Component } from \"react\";\nimport { Route, Switch, withRouter } from \"react-router-dom\";\n\nimport CameraContainer from \"../containers/camera-container\";\nimport ResultsContainer from \"../containers/results-container\";\nimport TestData from \"../containers/test-data-container\";\n\nimport RedirectRoute from \"./redirect.route\";\nimport ResultsRoute from \"./results.route\";\n\nimport { ROUTES } from \"../utils/constants\";\n\nclass Router extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<Switch>\n\t\t\t\t<Route exact path={ROUTES.HOME} component={CameraContainer} />\n\t\t\t\t<ResultsRoute path={ROUTES.RESULTS} component={ResultsContainer} />\n\n\t\t\t\t<Route path={ROUTES.TEST} component={TestData} />\n\n\t\t\t\t<RedirectRoute />\n\t\t\t</Switch>\n\t\t);\n\t}\n}\n\nexport default withRouter(Router);\n","import React, { Component } from \"react\";\nimport { BrowserRouter } from 'react-router-dom';\n\nimport Router from \"./routers\";\n\nclass App extends Component {\n  render() {\n    console.log({p: process.env})\n    return (\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <>\n          <p>{process.env.PUBLIC_URL}</p>\n          <Router />\n        </>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from \"./app\";\n\nimport \"./index.css\";\n\nimport * as serviceWorker from './serviceWorker';\n\nconst root = document.getElementById(\"root\");\nReactDOM.render((<App />), root);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}